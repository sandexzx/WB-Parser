#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
"""

import asyncio
import os
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from wb_api import WildberriesAPI
from config import config

try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError:
    pass

config.wb_api_key = os.getenv("WB_API_KEY", config.wb_api_key)

async def analyze_warehouse_names():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å,
    –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–∫–∞—Ç—å –ö–∞–∑–∞–Ω—å, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ –∏ –ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫
    """
    print("üè¢ –ê–ù–ê–õ–ò–ó –ù–ê–ó–í–ê–ù–ò–ô –°–ö–õ–ê–î–û–í WB")
    print("="*60)
    
    if not config.wb_api_key:
        print("‚ùå WB API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    api = WildberriesAPI(config.wb_api_key)
    
    try:
        warehouses = await api.get_warehouses()
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ –æ—Ç WB API")
        
        # –ò—â–µ–º —Å–∫–ª–∞–¥—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–∞—à–∏ —Ü–µ–ª–µ–≤—ã–µ –≥–æ—Ä–æ–¥–∞
        target_cities = ["–∫–∞–∑–∞–Ω—å", "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–Ω–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫"]
        
        print(f"\nüîç –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤: {target_cities}")
        print("-" * 60)
        
        for city in target_cities:
            print(f"\nüèôÔ∏è –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è '{city.title()}':")
            found_count = 0
            
            for warehouse in warehouses:
                wh_name = warehouse.get('name', '').lower()
                wh_id = warehouse.get('id', 0)
                
                # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞
                if city in wh_name:
                    found_count += 1
                    print(f"  ‚úÖ ID: {wh_id:6} | {warehouse.get('name', '')}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ
                    if 'address' in warehouse:
                        print(f"       –ê–¥—Ä–µ—Å: {warehouse['address']}")
                    if 'city' in warehouse:
                        print(f"       –ì–æ—Ä–æ–¥: {warehouse['city']}")
            
            if found_count == 0:
                print(f"  ‚ùå –ü—Ä—è–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                print(f"  üîç –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:")
                for warehouse in warehouses:
                    wh_name = warehouse.get('name', '').lower()
                    wh_id = warehouse.get('id', 0)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—É–∫–≤
                    if city[:3] in wh_name or city[:4] in wh_name:
                        print(f"    üí° –ü–æ—Ö–æ–∂–µ: ID: {wh_id:6} | {warehouse.get('name', '')}")
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–õ–ê–î–û–í")
        print("-" * 60)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö
        if warehouses:
            example_warehouse = warehouses[0]
            print(f"üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞:")
            for key in example_warehouse.keys():
                print(f"  ‚Ä¢ {key}")
            
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä —Å–∫–ª–∞–¥–∞:")
            for key, value in example_warehouse.items():
                print(f"  {key}: {value}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∫–ª–∞–¥—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º/–≥–æ—Ä–æ–¥–∞–º –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        city_groups = {}
        for warehouse in warehouses:
            wh_name = warehouse.get('name', '')
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –≥–æ—Ä–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            words = wh_name.split()
            if words:
                potential_city = words[0]  # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —á–∞—Å—Ç–æ –≥–æ—Ä–æ–¥
                if potential_city not in city_groups:
                    city_groups[potential_city] = 0
                city_groups[potential_city] += 1
        
        print(f"\nüèôÔ∏è –¢–û–ü-15 –≥—Ä—É–ø–ø —Å–∫–ª–∞–¥–æ–≤ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏:")
        sorted_cities = sorted(city_groups.items(), key=lambda x: x[1], reverse=True)
        for city, count in sorted_cities[:15]:
            print(f"  {city}: {count} —Å–∫–ª–∞–¥–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_specific_search():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—à–∏—Ö —Ü–µ–ª–µ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    """
    print(f"\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–û–ò–°–ö–ê")
    print("="*60)
    
    api = WildberriesAPI(config.wb_api_key)
    
    try:
        warehouses = await api.get_warehouses()
        target_names = ["–ö–∞–∑–∞–Ω—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫"]
        
        for target_name in target_names:
            print(f"\nüîç –ü–æ–∏—Å–∫ –¥–ª—è '{target_name}':")
            
            matches = []
            target_lower = target_name.lower().strip()
            
            for warehouse in warehouses:
                warehouse_name = warehouse.get('name', '')
                warehouse_id = warehouse.get('id', 0)
                warehouse_lower = warehouse_name.lower()
                
                # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                exact_match = target_lower == warehouse_lower
                target_in_warehouse = target_lower in warehouse_lower
                warehouse_in_target = warehouse_lower in target_lower
                
                # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –æ–±—â–∏—Ö —Å–ª–æ–≤
                clean_target = target_lower.replace('—Å–∫–ª–∞–¥', '').replace('warehouse', '').strip()
                clean_warehouse = warehouse_lower.replace('—Å–∫–ª–∞–¥', '').replace('warehouse', '').strip()
                
                city_match = (clean_target in clean_warehouse or 
                            clean_warehouse in clean_target) and len(clean_target) > 2
                
                if exact_match:
                    matches.append((warehouse_id, warehouse_name, '–¢–û–ß–ù–û–ï'))
                elif target_in_warehouse:
                    matches.append((warehouse_id, warehouse_name, '–ì–û–†–û–î_–í_–ù–ê–ó–í–ê–ù–ò–ò'))
                elif warehouse_in_target:
                    matches.append((warehouse_id, warehouse_name, '–ù–ê–ó–í–ê–ù–ò–ï_–í_–ì–û–†–û–î–ï'))
                elif city_match:
                    matches.append((warehouse_id, warehouse_name, '–ì–û–†–û–î_–°–û–í–ü–ê–î–ï–ù–ò–ï'))
            
            if matches:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                for wh_id, wh_name, match_type in matches[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                    print(f"    ID: {wh_id:6} | {match_type:15} | {wh_name}")
            else:
                print(f"  ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ test_specific_search: {e}")

if __name__ == "__main__":
    asyncio.run(analyze_warehouse_names())
    asyncio.run(test_specific_search())
