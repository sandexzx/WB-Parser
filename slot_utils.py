"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""

from typing import List, Dict, Any
import json
import logging
import os

logger = logging.getLogger(__name__)


def get_current_active_slots() -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –ß–∏—Ç–∞–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ current_active_slots.json
    """
    active_slots_file = "current_active_slots.json"
    
    try:
        if os.path.exists(active_slots_file):
            with open(active_slots_file, "r", encoding="utf-8") as f:
                slots_data = json.load(f)
                logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(slots_data)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
                return slots_data
        else:
            logger.info("üìÇ –§–∞–π–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            return []
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {e}")
        return []