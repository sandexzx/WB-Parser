#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å WB API
–£—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API, –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤–æ–º —Ç–µ—Å—Ç–µ
"""

import asyncio
import os
import sys
import json
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from wb_api import WildberriesAPI, ProductInfo
from config import config

try:
    from dotenv import load_dotenv
    load_dotenv(override=True)
    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

config.wb_api_key = os.getenv("WB_API_KEY", config.wb_api_key)


async def test_warehouses_detailed():
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    """
    print("\n" + "="*60)
    print("üè¢ –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ö–õ–ê–î–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
    print("="*60)
    
    api = WildberriesAPI(config.wb_api_key)
    
    try:
        # –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—ã—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        raw_response = await api._make_request("GET", "/api/v1/warehouses")
        
        print(f"üì° –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(raw_response)}")
        
        if isinstance(raw_response, list):
            print(f"‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–ª–∞–¥–æ–≤: {len(raw_response)}")
            
            if raw_response:
                print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞:")
                first_warehouse = raw_response[0]
                for key, value in first_warehouse.items():
                    print(f"  {key}: {value}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                with open("warehouses_fixed_data.json", "w", encoding="utf-8") as f:
                    json.dump(raw_response, f, ensure_ascii=False, indent=2)
                
                print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ warehouses_fixed_data.json")
                
        elif isinstance(raw_response, dict):
            print(f"‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç")
            print(f"üîë –ö–ª—é—á–∏: {list(raw_response.keys())}")
            
            if "result" in raw_response:
                warehouses = raw_response["result"]
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–ª–∞–¥–æ–≤ –≤ result: {len(warehouses)}")
        
        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        warehouses = await api.get_warehouses()
        print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ get_warehouses() —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def analyze_warehouse_structure():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è,
    –∫–∞–∫–∏–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –Ω–∞—à–µ–π –ª–æ–≥–∏–∫–∏
    """
    print("\n" + "="*60)
    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –°–ö–õ–ê–î–û–í")
    print("="*60)
    
    api = WildberriesAPI(config.wb_api_key)
    
    try:
        warehouses = await api.get_warehouses()
        
        if not warehouses:
            print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
        print(f"üìä –í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        all_fields = set()
        for warehouse in warehouses:
            if isinstance(warehouse, dict):
                all_fields.update(warehouse.keys())
        
        print(f"\nüîë –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤:")
        for field in sorted(all_fields):
            print(f"  ‚Ä¢ {field}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–∫–ª–∞–¥–æ–≤:")
        for i, warehouse in enumerate(warehouses[:5]):
            print(f"\n  –°–∫–ª–∞–¥ {i+1}:")
            if isinstance(warehouse, dict):
                for key, value in warehouse.items():
                    print(f"    {key}: {value}")
            else:
                print(f"    –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(warehouse)}")
        
        # –ò—â–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –ø—Ä–∏–µ–º–∫–æ–π
        acceptance_related_fields = []
        for field in all_fields:
            field_lower = field.lower()
            if any(keyword in field_lower for keyword in 
                   ['accept', '–ø—Ä–∏–µ–º–∫', 'coeff', '–∫–æ—ç—Ñ', 'rate', '—Ç–∞—Ä–∏—Ñ', 'price', '—Ü–µ–Ω']):
                acceptance_related_fields.append(field)
        
        if acceptance_related_fields:
            print(f"\nüí∞ –ü–æ–ª—è, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–µ–º–∫–æ–π:")
            for field in acceptance_related_fields:
                print(f"  ‚Ä¢ {field}")
        else:
            print(f"\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π, —è–≤–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –ø—Ä–∏–µ–º–∫–∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False


async def test_acceptance_with_analysis():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º acceptance options —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
    """
    print("\n" + "="*60)
    print("üì¶ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ACCEPTANCE OPTIONS")
    print("="*60)
    
    api = WildberriesAPI(config.wb_api_key)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_products = [
        ProductInfo(barcode="1234567890123", quantity=1),
    ]
    
    try:
        # –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        request_data = [{"quantity": 1, "barcode": "1234567890123"}]
        raw_response = await api._make_request("POST", "/api/v1/acceptance/options", 
                                              data=request_data)
        
        print(f"üì° –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(raw_response)}")
        print(f"üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:")
        print(json.dumps(raw_response, indent=2, ensure_ascii=False))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏
        if isinstance(raw_response, dict) and "result" in raw_response:
            result = raw_response["result"]
            if result and isinstance(result[0], dict):
                error_item = result[0]
                print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π:")
                for key, value in error_item.items():
                    print(f"  {key}: {value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_rate_limiter_fixed():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º rate limiter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    """
    print("\n" + "="*60)
    print("‚è±Ô∏è –¢–ï–°–¢ RATE LIMITING (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)")
    print("="*60)
    
    api = WildberriesAPI(config.wb_api_key)
    
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º 3 –∑–∞–ø—Ä–æ—Å–∞ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤...")
    
    start_time = asyncio.get_event_loop().time()
    
    for i in range(3):
        try:
            print(f"  –ó–∞–ø—Ä–æ—Å {i+1}...", end=" ")
            request_start = asyncio.get_event_loop().time()
            
            warehouses = await api.get_warehouses()
            
            request_time = asyncio.get_event_loop().time() - request_start
            total_elapsed = asyncio.get_event_loop().time() - start_time
            
            print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {request_time:.1f}—Å (–≤—Å–µ–≥–æ {total_elapsed:.1f}—Å, —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    total_time = asyncio.get_event_loop().time() - start_time
    print(f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    if total_time >= 4:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è 3 –∑–∞–ø—Ä–æ—Å–æ–≤
        print("‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è Rate limiting –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WB API")
    print("="*60)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ API")
    print("="*60)
    
    if not config.wb_api_key:
        print("‚ùå WB API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    tests = [
        ("–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∫–ª–∞–¥–æ–≤", test_warehouses_detailed),
        ("–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–æ–≤", analyze_warehouse_structure),
        ("–ê–Ω–∞–ª–∏–∑ acceptance options", test_acceptance_with_analysis),
        ("–¢–µ—Å—Ç rate limiting", test_rate_limiter_fixed),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        try:
            success = await test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    passed = sum(1 for _, success in results if success)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed >= 3:
        print("üéâ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç! –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É.")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è.")


if __name__ == "__main__":
    asyncio.run(main())