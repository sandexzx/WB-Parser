#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""
import asyncio
import logging
import time
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent))

from monitor import SlotMonitor
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_dynamic_pause_calculation():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞—É–∑—ã –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
    """
    logger.info("üß™ –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞—É–∑—ã")
    
    monitor = SlotMonitor()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ü–∏–∫–ª—ã
    logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ü–∏–∫–ª—ã (–¥–æ–ª–∂–Ω—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è)")
    total_start = time.time()
    
    for i in range(8):
        cycle_start = time.time()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª (2 —Å–µ–∫—É–Ω–¥—ã)
        await asyncio.sleep(2)
        cycle_duration = time.time() - cycle_start
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—É–∑—É
        pause = monitor._calculate_dynamic_pause(cycle_duration)
        current_time = time.time() - total_start
        
        logger.info(f"  –¶–∏–∫–ª {i+1}: {cycle_duration:.1f}—Å, –ø–∞—É–∑–∞ {pause:.1f}—Å (–≤—Ä–µ–º—è {current_time:.1f}—Å)")
        
        if pause > 0:
            await asyncio.sleep(pause)
    
    total_duration = time.time() - total_start
    logger.info(f"üìä –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.1f}—Å")
    logger.info("‚úÖ –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞—É–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_adaptive_monitoring_interval():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    logger.info("üß™ –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class TestMonitor:
        def _calculate_adaptive_monitoring_interval(self, cycle_duration: float) -> float:
            if not config.enable_adaptive_monitoring:
                return config.check_interval_seconds
            
            # –ï—Å–ª–∏ —Ü–∏–∫–ª –±—ã—Å—Ç—Ä—ã–π (–º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥) - –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–∞—É–∑—É
            if cycle_duration < 10:
                return max(1.0, config.min_monitoring_interval)
            
            # –ï—Å–ª–∏ —Ü–∏–∫–ª –º–µ–¥–ª–µ–Ω–Ω—ã–π (–±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥) - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ä–∞–∑—É
            return 0.1
    
    monitor = TestMonitor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        (5.0, "–±—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª"),
        (8.0, "—Å—Ä–µ–¥–Ω–µ-–±—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª"),
        (12.0, "–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ü–∏–∫–ª"),
        (30.0, "–æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ü–∏–∫–ª"),
    ]
    
    for cycle_duration, description in test_cases:
        interval = monitor._calculate_adaptive_monitoring_interval(cycle_duration)
        logger.info(f"  {description} ({cycle_duration}—Å) -> –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}—Å")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

async def test_optimized_sheets_parsing():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Google Sheets
    """
    logger.info("üß™ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Google Sheets")
    
    try:
        from sheets_parser import GoogleSheetsParser
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = GoogleSheetsParser(
            credentials_file=config.google_credentials_file,
            sheet_url=config.google_sheets_url
        )
        
        # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞)
        logger.info("üìã –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ")
        start_time = time.time()
        
        tasks = await parser.get_monitoring_tasks()
        
        duration = time.time() - start_time
        logger.info(f"‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á
        if tasks:
            logger.info("üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:")
            for i, task in enumerate(tasks[:3]):
                logger.info(f"  {i+1}. {task.barcode} - {task.quantity} —à—Ç, —Å–∫–ª–∞–¥—ã: {task.allowed_warehouses}")
        
        # –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (—Å –∫—ç—à–µ–º)
        logger.info("üìã –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)")
        start_time = time.time()
        
        tasks_cached = await parser.get_monitoring_tasks()
        
        duration_cached = time.time() - start_time
        logger.info(f"‚úÖ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration_cached:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks_cached)} –∑–∞–¥–∞—á –∏–∑ –∫—ç—à–∞")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        logger.info("üìã –¢–µ—Å—Ç 3: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        parser.clear_cache()
        
        start_time = time.time()
        tasks_fresh = await parser.get_monitoring_tasks()
        duration_fresh = time.time() - start_time
        
        logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration_fresh:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks_fresh)} –∑–∞–¥–∞—á")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        logger.info(f"  –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {duration:.2f} —Å–µ–∫")
        logger.info(f"  –ó–∞–ø—Ä–æ—Å —Å –∫—ç—à–µ–º: {duration_cached:.2f} —Å–µ–∫ (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ {duration/duration_cached:.1f}x)")
        logger.info(f"  –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∫—ç—à–∞: {duration_fresh:.2f} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        if len(tasks) == len(tasks_cached) == len(tasks_fresh):
            logger.info("‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤–µ—Ä–Ω—É–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á")
        else:
            logger.warning("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
            
        logger.info("‚úÖ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        logger.info("‚ÑπÔ∏è  –í–æ–∑–º–æ–∂–Ω–æ, Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    logger.info("=" * 50)
    
    # –¢–µ—Å—Ç 1: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞
    await test_dynamic_pause_calculation()
    logger.info("")
    
    # –¢–µ—Å—Ç 2: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    test_adaptive_monitoring_interval()
    logger.info("")
    
    # –¢–µ—Å—Ç 3: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Google Sheets
    await test_optimized_sheets_parsing()
    logger.info("")
    
    logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    logger.info("=" * 50)

if __name__ == "__main__":
    asyncio.run(main())