#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞
"""

import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from config import config
from telegram_bot import TelegramDatabase, TelegramUser, WBSlotsBot
from monitor import FoundSlot, MonitoringTask

logger = logging.getLogger(__name__)


async def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
    db = TelegramDatabase("test_telegram_users.db")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user = TelegramUser(
        user_id=123456789,
        username="testuser",
        first_name="–¢–µ—Å—Ç",
        last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_user(test_user)
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    retrieved_user = db.get_user(123456789)
    if retrieved_user and retrieved_user.user_id == 123456789:
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ –±–∞–∑—ã")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    db.update_subscription(123456789, False)
    updated_user = db.get_user(123456789)
    if not updated_user.subscribed:
        print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_stats()
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    return True


def test_slot_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å–ª–æ—Ç–∞—Ö"""
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–∞
    test_slot_data = {
        'barcode': '1234567890123',
        'warehouse_id': 1234,
        'warehouse_name': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥',
        'coefficient': 0.0,
        'box_type_name': '–û–±—ã—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞',
        'date': '2025-07-05T10:30:00',
        'allow_unload': True,
        'found_at': '2025-07-04T15:45:30',
        'task': {
            'quantity': 100
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API)
    class TestBot:
        def _format_slot_message(self, slot_data):
            from telegram_bot import WBSlotsBot
            bot = WBSlotsBot.__new__(WBSlotsBot)  # –°–æ–∑–¥–∞–µ–º –±–µ–∑ __init__
            return bot._format_slot_message(slot_data)
    
    test_bot = TestBot()
    message = test_bot._format_slot_message(test_slot_data)
    
    if "–ù–ê–ô–î–ï–ù –í–´–ì–û–î–ù–´–ô –°–õ–û–¢" in message and "1234567890123" in message:
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üìÑ –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:")
        print(message)
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
        return False


async def test_bot_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
    
    if not config.telegram_bot_token:
        print("‚ö†Ô∏è Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return True
    
    try:
        from telegram_bot import initialize_bot
        bot = await initialize_bot()
        
        if bot:
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
            try:
                bot_info = await bot.bot.get_me()
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API: @{bot_info.username}")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                await bot.stop()
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False


def test_user_notification_settings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    test_user = TelegramUser(
        user_id=987654321,
        username="testuser2",
        first_name="–¢–µ—Å—Ç2",
        last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2",
        notification_settings={
            "max_coefficient": 0.5,
            "min_coefficient": 0.0,
            "preferred_warehouses": [1234, 5678],
            "quiet_hours": {"start": 23, "end": 7},  # –¢–∏—Ö–∏–µ —á–∞—Å—ã —Å 23 –¥–æ 7
            "instant_notifications": True
        }
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–∞
    slot_data = {
        'coefficient': 0.0,
        'warehouse_id': 1234
    }
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –º–æ–∫–∏–Ω–≥–∞ datetime
    def check_notification_logic(user, slot_data):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è _should_send_notification –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not user.notification_settings.get('instant_notifications', True):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        coef = slot_data.get('coefficient', -1)
        max_coef = user.notification_settings.get('max_coefficient', 1.0)
        min_coef = user.notification_settings.get('min_coefficient', 0.0)
        
        if not (min_coef <= coef <= max_coef):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å–∫–ª–∞–¥—ã
        preferred_warehouses = user.notification_settings.get('preferred_warehouses', [])
        if preferred_warehouses:
            warehouse_id = slot_data.get('warehouse_id')
            if warehouse_id not in preferred_warehouses:
                return False
        
        # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã –≤ —Ç–µ—Å—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        return True
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç
    should_send = check_notification_logic(test_user, slot_data)
    if should_send:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç)")
    else:
        print("‚ùå –û—à–∏–±–∫–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        return False
    
    # –¢–µ—Å—Ç 2: –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    slot_data['coefficient'] = 1.5
    should_send = check_notification_logic(test_user, slot_data)
    if not should_send:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–≤—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)")
    else:
        print("‚ùå –û—à–∏–±–∫–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        return False
    
    # –¢–µ—Å—Ç 3: –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∫–ª–∞–¥
    slot_data['coefficient'] = 0.0
    slot_data['warehouse_id'] = 9999
    should_send = check_notification_logic(test_user, slot_data)
    if not should_send:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∫–ª–∞–¥)")
    else:
        print("‚ùå –û—à–∏–±–∫–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        return False
    
    # –¢–µ—Å—Ç 4: –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    slot_data['warehouse_id'] = 1234  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∫–ª–∞–¥
    test_user.notification_settings['instant_notifications'] = False
    should_send = check_notification_logic(test_user, slot_data)
    if not should_send:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–æ—Ç–∫–ª—é—á–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)")
    else:
        print("‚ùå –û—à–∏–±–∫–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        return False
    
    return True


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram –±–æ—Ç–∞...")
    print("=" * 50)
    
    tests = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database()),
        ("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π", test_slot_formatting()),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", test_user_notification_settings()),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞", test_bot_initialization())
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}:")
        try:
            if test_name == "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" or test_name == "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞":
                result = await test_func
            else:
                result = test_func
            
            if result:
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.WARNING,  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    success = await run_all_tests()
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    try:
        import os
        if os.path.exists("test_telegram_users.db"):
            os.remove("test_telegram_users.db")
            print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    return success


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)