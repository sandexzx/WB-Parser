#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
"""

import asyncio
import os
import sys
import json
from pathlib import Path
from datetime import datetime

sys.path.insert(0, str(Path(__file__).parent.parent))

from monitor import SlotMonitor
from config import config

try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError:
    pass

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
config.wb_api_key = os.getenv("WB_API_KEY", config.wb_api_key)
config.google_sheets_url = os.getenv("GOOGLE_SHEETS_URL", config.google_sheets_url)

async def test_real_monitoring_cycle():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
    """
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not config.wb_api_key:
        print("‚ùå WB API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WB_API_KEY –≤ .env")
        return False
    
    if not config.google_sheets_url:
        print("‚ùå URL —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GOOGLE_SHEETS_URL –≤ .env")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
    monitor = SlotMonitor()
    
    print(f"\nüìä –≠–¢–ê–ü 1: –ß—Ç–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ Google Sheets")
    print("-" * 50)
    
    try:
        # –ß–∏—Ç–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑—á–∏–∫–∞
        tasks = await monitor.sheets_parser.get_monitoring_tasks()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
        
        if not tasks:
            print("‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        for i, task in enumerate(tasks, 1):
            print(f"\nüì¶ –ó–∞–¥–∞—á–∞ {i}:")
            print(f"  ‚Ä¢ –ë–∞—Ä–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞: {task.barcode}")
            print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏: {task.quantity} –µ–¥–∏–Ω–∏—Ü")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID —Å–∫–ª–∞–¥–æ–≤ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            warehouse_names = []
            if 117986 in task.allowed_warehouses:
                warehouse_names.append("–ö–∞–∑–∞–Ω—å")
            if 208277 in task.allowed_warehouses:
                warehouse_names.append("–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫") 
            if 686 in task.allowed_warehouses:
                warehouse_names.append("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")
            
            print(f"  ‚Ä¢ –¶–µ–ª–µ–≤—ã–µ —Å–∫–ª–∞–¥—ã: {', '.join(warehouse_names)} (ID: {task.allowed_warehouses})")
            print(f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: —Å {task.date_from} –¥–æ {task.date_to}")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{task.max_coefficient}")
            print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if task.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
            print(f"  ‚Ä¢ –î–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã: {'‚úÖ –î–∞' if task.is_date_valid() else '‚ùå –ù–µ—Ç'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False
    
    print(f"\nüîç –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤")
    print("-" * 50)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    active_tasks = [task for task in tasks if task.is_active and task.is_date_valid()]
    print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(active_tasks)}")
    
    if not active_tasks:
        print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏")
        return False
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±–∞—Ä–∫–æ–¥–∞–º–∏ —á–µ—Ä–µ–∑ WB API
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await monitor._perform_monitoring_cycle()
        
        print("‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False
    
    print(f"\nüìà –≠–¢–ê–ü 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("-" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    stats = await monitor.get_statistics()
    
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –¶–∏–∫–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['checks_performed']}")
    print(f"  ‚Ä¢ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {stats['slots_found']}")
    print(f"  ‚Ä¢ –û—à–∏–±–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats['errors_count']}")
    print(f"  ‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats['last_check_str']}")
    print(f"  ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['notified_slots_count']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    today_str = datetime.now().strftime('%Y-%m-%d')
    slots_file = f"found_slots/slots_{today_str}.json"
    
    if os.path.exists(slots_file):
        try:
            with open(slots_file, "r", encoding="utf-8") as f:
                found_slots = json.load(f)
            
            print(f"\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {slots_file}):")
            print(f"  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(found_slots)}")
            
            if found_slots:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
                slots_by_barcode = {}
                for slot in found_slots:
                    barcode = slot.get('barcode', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    if barcode not in slots_by_barcode:
                        slots_by_barcode[barcode] = []
                    slots_by_barcode[barcode].append(slot)
                
                for barcode, barcode_slots in slots_by_barcode.items():
                    print(f"\n  üì¶ –¢–æ–≤–∞—Ä {barcode}:")
                    print(f"    –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(barcode_slots)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    for i, slot in enumerate(barcode_slots[:3], 1):  # –ü–µ—Ä–≤—ã–µ 3 —Å–ª–æ—Ç–∞
                        warehouse_name = slot.get('warehouse_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        coefficient = slot.get('coefficient', -1)
                        date = slot.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        is_available = slot.get('is_available', False)
                        matches_criteria = slot.get('matches_criteria', False)
                        
                        status = "‚úÖ –ü–û–î–•–û–î–ò–¢" if matches_criteria else "‚ö†Ô∏è –ù–ï –ü–û–î–•–û–î–ò–¢"
                        availability = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if is_available else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                        
                        print(f"    {i}. {status} | {availability}")
                        print(f"       –°–∫–ª–∞–¥: {warehouse_name}")
                        print(f"       –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{coefficient}")
                        print(f"       –î–∞—Ç–∞: {date[:10] if len(date) > 10 else date}")
                        
            else:
                print(f"  ‚ÑπÔ∏è –í —ç—Ç–æ–º —Ü–∏–∫–ª–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                print(f"     –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —Ö–æ—Ä–æ—à–∏–µ —Å–ª–æ—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–µ–¥–∫–æ")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ —Å–ª–æ—Ç–æ–≤: {e}")
    else:
        print(f"\n‚ÑπÔ∏è –§–∞–π–ª —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω")
        print(f"   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ –¥–∞–Ω–Ω–æ–º —Ü–∏–∫–ª–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –±—ã–ª–æ")
    
    print(f"\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    if stats['errors_count'] == 0:
        print("‚úÖ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python wb_monitor/main.py")
        
        if stats['slots_found'] > 0:
            print("üéØ –ë–û–ù–£–°: –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã!")
        else:
            print("‚ÑπÔ∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            
        return True
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        return False

if __name__ == "__main__":
    asyncio.run(test_real_monitoring_cycle())