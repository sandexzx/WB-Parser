#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –ø—Ä–∏–µ–º–∫–∏ WB
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–π endpoint /api/v1/acceptance/coefficients
"""

import asyncio
import os
import sys
import json
from pathlib import Path
from datetime import datetime

sys.path.insert(0, str(Path(__file__).parent.parent))

from wb_api import WildberriesAPI, AcceptanceCoefficient
from config import config

try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

config.wb_api_key = os.getenv("WB_API_KEY", config.wb_api_key)


async def test_all_warehouses_coefficients():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
    –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–æ –¥–∞—Å—Ç –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É
    """
    print("\n" + "="*60)
    print("üìä –¢–ï–°–¢ –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í –î–õ–Ø –í–°–ï–• –°–ö–õ–ê–î–û–í")
    print("="*60)
    
    api = WildberriesAPI(config.wb_api_key)
    
    try:
        print("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤...")
        print("   (–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏–∑-–∑–∞ rate limiting)")
        
        coefficients = await api.get_acceptance_coefficients()
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(coefficients)} –∑–∞–ø–∏—Å–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
        
        if coefficients:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            unique_warehouses = set(c.warehouse_id for c in coefficients)
            unique_dates = set(c.date.date() for c in coefficients)
            available_slots = [c for c in coefficients if c.is_slot_available()]
            
            print(f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: {len(unique_warehouses)}")
            print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {len(unique_dates)}")
            print(f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            print(f"\nüìä –ü—Ä–∏–º–µ—Ä—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
            coef_groups = {}
            for c in coefficients[:20]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                coef = c.coefficient
                if coef not in coef_groups:
                    coef_groups[coef] = []
                coef_groups[coef].append(c)
            
            for coef, items in sorted(coef_groups.items()):
                print(f"\n  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coef}:")
                for item in items[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
                    status = "‚úÖ –î–û–°–¢–£–ü–ï–ù" if item.is_slot_available() else "‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù"
                    print(f"    {status} | {item.warehouse_name} | {item.box_type_name} | {item.date.strftime('%d.%m.%Y')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            coefficients_data = []
            for c in coefficients:
                coefficients_data.append({
                    "date": c.date.isoformat(),
                    "coefficient": c.coefficient,
                    "warehouse_id": c.warehouse_id,
                    "warehouse_name": c.warehouse_name,
                    "allow_unload": c.allow_unload,
                    "box_type_name": c.box_type_name,
                    "box_type_id": c.box_type_id,
                    "is_available": c.is_slot_available(),
                    "is_sorting_center": c.is_sorting_center
                })
            
            with open("coefficients_all_warehouses.json", "w", encoding="utf-8") as f:
                json.dump(coefficients_data, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ coefficients_all_warehouses.json")
            
        return len(coefficients) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
        return False


async def test_specific_warehouses_coefficients():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –∏–∑ –Ω–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    """
    print("\n" + "="*60)
    print("üè¢ –¢–ï–°–¢ –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–´–• –°–ö–õ–ê–î–û–í")
    print("="*60)
    
    api = WildberriesAPI(config.wb_api_key)
    
    # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    test_warehouses = [218987, 204939, 206236]  # –ê–ª–º–∞—Ç—ã, –ê—Å—Ç–∞–Ω–∞, –ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã
    
    try:
        print(f"üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–∫–ª–∞–¥–æ–≤: {test_warehouses}")
        
        coefficients = await api.get_acceptance_coefficients(test_warehouses)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(coefficients)} –∑–∞–ø–∏—Å–µ–π")
        
        if coefficients:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∫–ª–∞–¥–∞–º
            by_warehouse = {}
            for c in coefficients:
                wh_id = c.warehouse_id
                if wh_id not in by_warehouse:
                    by_warehouse[wh_id] = []
                by_warehouse[wh_id].append(c)
            
            print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º:")
            
            for wh_id, wh_coefficients in by_warehouse.items():
                first_coef = wh_coefficients[0]
                print(f"\nüè¢ {first_coef.warehouse_name} (ID: {wh_id})")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞
                by_date = {}
                for c in wh_coefficients:
                    date_key = c.date.date()
                    if date_key not in by_date:
                        by_date[date_key] = []
                    by_date[date_key].append(c)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
                for date_key in sorted(by_date.keys())[:7]:  # –ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π
                    day_coefficients = by_date[date_key]
                    available_count = sum(1 for c in day_coefficients if c.is_slot_available())
                    
                    print(f"  üìÖ {date_key.strftime('%d.%m.%Y')}: {len(day_coefficients)} —Ç–∏–ø–æ–≤ —É–ø–∞–∫–æ–≤–∫–∏, {available_count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                    for c in day_coefficients:
                        if c.is_slot_available():
                            print(f"    ‚úÖ {c.box_type_name} (–∫–æ—ç—Ñ: {c.coefficient})")
                        else:
                            print(f"    ‚ùå {c.box_type_name} (–∫–æ—ç—Ñ: {c.coefficient}, —Ä–∞–∑–≥—Ä—É–∑–∫–∞: {c.allow_unload})")
        
        return len(coefficients) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def analyze_available_slots():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    """
    print("\n" + "="*60)
    print("üîç –ê–ù–ê–õ–ò–ó –î–û–°–¢–£–ü–ù–´–• –°–õ–û–¢–û–í")
    print("="*60)
    
    api = WildberriesAPI(config.wb_api_key)
    
    try:
        print("üîÑ –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        coefficients = await api.get_acceptance_coefficients()
        
        if not coefficients:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return False
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = [c for c in coefficients if c.is_slot_available()]
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(coefficients)}")
        print(f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}")
        print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {(len(available_slots) / len(coefficients) * 100):.1f}%")
        
        if available_slots:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —É–ø–∞–∫–æ–≤–∫–∏
            box_types = {}
            for slot in available_slots:
                box_type = slot.box_type_name
                if box_type not in box_types:
                    box_types[box_type] = 0
                box_types[box_type] += 1
            
            print(f"\nüì¶ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —É–ø–∞–∫–æ–≤–∫–∏:")
            for box_type, count in sorted(box_types.items(), key=lambda x: x[1], reverse=True):
                print(f"  ‚Ä¢ {box_type}: {count} —Å–ª–æ—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º
            dates_analysis = {}
            for slot in available_slots:
                date_key = slot.date.date()
                if date_key not in dates_analysis:
                    dates_analysis[date_key] = 0
                dates_analysis[date_key] += 1
            
            print(f"\nüìÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ –¥–∞—Ç–∞–º (–ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π):")
            for date_key in sorted(dates_analysis.keys())[:7]:
                count = dates_analysis[date_key]
                print(f"  ‚Ä¢ {date_key.strftime('%d.%m.%Y')}: {count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∫–ª–∞–¥–∞–º
            warehouse_analysis = {}
            for slot in available_slots:
                wh_name = slot.warehouse_name
                if wh_name not in warehouse_analysis:
                    warehouse_analysis[wh_name] = 0
                warehouse_analysis[wh_name] += 1
            
            print(f"\nüè¢ –¢–û–ü-10 —Å–∫–ª–∞–¥–æ–≤ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:")
            top_warehouses = sorted(warehouse_analysis.items(), key=lambda x: x[1], reverse=True)[:10]
            for wh_name, count in top_warehouses:
                print(f"  ‚Ä¢ {wh_name}: {count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False


async def test_rate_limiting_coefficients():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º rate limiting –¥–ª—è endpoint –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 6 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    """
    print("\n" + "="*60)
    print("‚è±Ô∏è –¢–ï–°–¢ RATE LIMITING –î–õ–Ø –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í")
    print("="*60)
    
    api = WildberriesAPI(config.wb_api_key)
    
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º 3 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ä—è–¥ –∫ coefficients endpoint...")
    print("   (–î–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏, —Ç.–∫. –ª–∏–º–∏—Ç 6 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É)")
    
    start_time = asyncio.get_event_loop().time()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    test_warehouses = [218987]
    
    for i in range(3):
        try:
            print(f"  –ó–∞–ø—Ä–æ—Å {i+1}...", end=" ")
            request_start = asyncio.get_event_loop().time()
            
            coefficients = await api.get_acceptance_coefficients(test_warehouses)
            
            request_time = asyncio.get_event_loop().time() - request_start
            total_elapsed = asyncio.get_event_loop().time() - start_time
            
            print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {request_time:.1f}—Å (–≤—Å–µ–≥–æ {total_elapsed:.1f}—Å, –∑–∞–ø–∏—Å–µ–π: {len(coefficients)})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    total_time = asyncio.get_event_loop().time() - start_time
    print(f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")
    
    # –î–ª—è 6 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ~10 —Å–µ–∫—É–Ω–¥
    if total_time >= 20:  # 3 –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ~10 —Å–µ–∫
        print("‚úÖ Rate limiting –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    else:
        print("‚ö†Ô∏è Rate limiting –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏–µ–º–∫–∏
    """
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í –ü–†–ò–ï–ú–ö–ò WB")
    print("="*60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π endpoint /api/v1/acceptance/coefficients")
    print("="*60)
    
    if not config.wb_api_key:
        print("‚ùå WB API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    tests = [
        ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤", test_specific_warehouses_coefficients),
        ("–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤", analyze_available_slots),
        ("Rate limiting –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤", test_rate_limiting_coefficients),
        ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤", test_all_warehouses_coefficients),  # –°–∞–º—ã–π –¥–æ–ª–≥–∏–π —Ç–µ—Å—Ç –≤ –∫–æ–Ω—Ü–µ
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        try:
            success = await test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í")
    print("="*60)
    
    passed = sum(1 for _, success in results if success)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed >= 3:
        print("üéâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–µ–º–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ JSON —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.")


if __name__ == "__main__":
    asyncio.run(main())