# sheets_parser.py - –†–∞–±–æ—Ç–∞ —Å Google Sheets
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
–ß–∏—Ç–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑—á–∏–∫–∞
"""
import asyncio
import gspread
import os
from google.oauth2.service_account import Credentials
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime, date, timedelta
import logging
import re

# Load environment variables first
try:
    from dotenv import load_dotenv
    load_dotenv(override=True)
except ImportError:
    pass

from wb_api import WildberriesAPI
from config import config

# Update config with environment variables
config.wb_api_key = os.getenv("WB_API_KEY", config.wb_api_key)
config.google_sheets_url = os.getenv("GOOGLE_SHEETS_URL", config.google_sheets_url)

logger = logging.getLogger(__name__)


@dataclass
class MonitoringTask:
    """
    –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ Google Sheets
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    """
    barcode: str                    # –ë–∞—Ä–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞
    quantity: int                   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü
    allowed_warehouses: List[int]   # –°–ø–∏—Å–æ–∫ ID —Å–∫–ª–∞–¥–æ–≤, –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–ª—è—Ç—å
    max_coefficient: float          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏–µ–º–∫–∏
    date_from: date                 # –° –∫–∞–∫–æ–π –¥–∞—Ç—ã –º–æ–∂–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
    date_to: date                   # –î–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã –º–æ–∂–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
    is_active: bool = True          # –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
    
    def is_date_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        today = date.today()
        # –†–∞–∑—Ä–µ—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –µ—Å–ª–∏:
        # 1. –ü–µ—Ä–∏–æ–¥ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è (today <= date_to)
        # 2. –ò –¥–æ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        monitoring_start_buffer = 30  # –¥–Ω–µ–π –¥–æ date_from –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        earliest_monitoring_date = self.date_from - timedelta(days=monitoring_start_buffer)
        
        return earliest_monitoring_date <= today <= self.date_to


class GoogleSheetsParser:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets API
    –ß–∏—Ç–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    """
    
    def __init__(self, credentials_file: str, sheet_url: str):
        self.credentials_file = credentials_file
        self.sheet_url = sheet_url
        self.client = None
        self.workbook = None
        self._warehouse_cache = {}  # –ö—ç—à –¥–ª—è —Å–∫–ª–∞–¥–æ–≤
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Sheets API
        self.scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]

    async def get_monitoring_tasks_from_cells(self, worksheet_name: str = None) -> List[MonitoringTask]:
        """
        –ß–∏—Ç–∞–µ—Ç –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞)
        –ï—Å–ª–∏ worksheet_name –Ω–µ —É–∫–∞–∑–∞–Ω, —á–∏—Ç–∞–µ—Ç –≤—Å–µ –ª–∏—Å—Ç—ã
        """
        if not self.workbook:
            self._open_workbook()
        
        all_tasks = []
        
        try:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç, —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
            if worksheet_name:
                worksheets = [self.workbook.worksheet(worksheet_name)]
            else:
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
                worksheets = self.workbook.worksheets()
            
            logger.info(f"üìÑ –ë—É–¥–µ–º —á–∏—Ç–∞—Ç—å {len(worksheets)} –ª–∏—Å—Ç–æ–≤")
            
            for worksheet in worksheets:
                logger.info(f"üìÑ –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç: {worksheet.title}")
                
                try:
                    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
                    warehouse_names_str = worksheet.acell('B4').value or ""  # –ù–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
                    date_from_str = worksheet.acell('B5').value or ""        # –î–∞—Ç–∞ —Å
                    date_to_str = worksheet.acell('B6').value or ""          # –î–∞—Ç–∞ –¥–æ
                    
                    logger.info(f"üè¢ –°–∫–ª–∞–¥—ã –∏–∑ B4: {warehouse_names_str}")
                    logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from_str} - {date_to_str}")
                    
                    # –ü–∞—Ä—Å–∏–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    date_from = self._parse_date(date_from_str)
                    date_to = self._parse_date(date_to_str)
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–ª–∞–¥–æ–≤ –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
                    worksheet_allowed_warehouses = await self._get_warehouse_ids_by_names(warehouse_names_str)
                    
                    # –ß–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —è—á–µ–µ–∫ B8-B9 (–±–∞—Ä–∫–æ–¥—ã) –∏ C8-C9 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
                    tasks = []
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ 8, 9, 10... –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
                    row = 8
                    while True:
                        barcode_cell = f'B{row}'
                        quantity_cell = f'C{row}'
                        
                        barcode = worksheet.acell(barcode_cell).value
                        quantity_str = worksheet.acell(quantity_cell).value
                        
                        # –ï—Å–ª–∏ –±–∞—Ä–∫–æ–¥ –ø—É—Å—Ç–æ–π, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —á—Ç–µ–Ω–∏–µ
                        if not barcode or str(barcode).strip() == "":
                            break
                        
                        try:
                            quantity = int(str(quantity_str).strip()) if quantity_str else 1
                        except ValueError:
                            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —è—á–µ–π–∫–µ {quantity_cell}: {quantity_str}")
                            quantity = 1
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                        task = MonitoringTask(
                            barcode=str(barcode).strip(),
                            quantity=quantity,
                            allowed_warehouses=worksheet_allowed_warehouses,
                            max_coefficient=1.0,  # –ü–æ–∫–∞ –∏—â–µ–º —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã
                            date_from=date_from,
                            date_to=date_to,
                            is_active=True
                        )
                        
                        tasks.append(task)
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {barcode} ({quantity} —à—Ç) –∏–∑ –ª–∏—Å—Ç–∞ {worksheet.title}")
                        
                        row += 1
                        
                        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                        if row > 100:
                            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫ (100), –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —á—Ç–µ–Ω–∏–µ")
                            break
                    
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –∏–∑ –ª–∏—Å—Ç–∞ {worksheet.title}")
                    all_tasks.extend(tasks)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ {worksheet.title}: {e}")
                    continue
            
            logger.info(f"‚úÖ –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ {len(worksheets)} –ª–∏—Å—Ç–æ–≤")
            return all_tasks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            raise
    
    async def _get_warehouse_ids_by_names(self, warehouse_names_str: str) -> List[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID —Å–∫–ª–∞–¥–æ–≤ –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç WB API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∞–º
        """
        if not warehouse_names_str:
            return []
        
        # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
        warehouse_names = [name.strip() for name in warehouse_names_str.split(',')]
        logger.info(f"üîç –ò—â–µ–º ID –¥–ª—è —Å–∫–ª–∞–¥–æ–≤: {warehouse_names}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã —á–µ—Ä–µ–∑ API
        api = WildberriesAPI(config.wb_api_key)
        
        try:
            all_warehouses = await api.get_warehouses()
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(all_warehouses)} —Å–∫–ª–∞–¥–æ–≤ –æ—Ç API")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info("üîç –ü—Ä–∏–º–µ—Ä—ã —Å–∫–ª–∞–¥–æ–≤ –∏–∑ API (–ø–µ—Ä–≤—ã–µ 10):")
            for i, warehouse in enumerate(all_warehouses[:10]):
                wh_name = warehouse.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                wh_id = warehouse.get('id', 0)
                logger.info(f"  {i+1}. ID: {wh_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{wh_name}'")
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            found_warehouses = []

            search_results = {}  # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

            for warehouse in all_warehouses:
                warehouse_name = warehouse.get('name', '')
                warehouse_id = warehouse.get('id', 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                for target_name in warehouse_names:
                    target_lower = target_name.lower().strip()
                    warehouse_lower = warehouse_name.lower()
                    
                    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                    exact_match = target_lower == warehouse_lower
                    target_in_warehouse = target_lower in warehouse_lower
                    warehouse_in_target = warehouse_lower in target_lower
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
                    # –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    clean_target = target_lower.replace('—Å–∫–ª–∞–¥', '').replace('warehouse', '').strip()
                    clean_warehouse = warehouse_lower.replace('—Å–∫–ª–∞–¥', '').replace('warehouse', '').strip()
                    
                    city_match = (clean_target in clean_warehouse or 
                                clean_warehouse in clean_target) and len(clean_target) > 2
                    
                    if exact_match or target_in_warehouse or warehouse_in_target or city_match:
                        if target_name not in search_results:
                            search_results[target_name] = []
                        
                        search_results[target_name].append({
                            'id': warehouse_id,
                            'name': warehouse_name,
                            'match_type': 'exact' if exact_match else 
                                        'target_in_warehouse' if target_in_warehouse else
                                        'warehouse_in_target' if warehouse_in_target else 'city_match'
                        })

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            logger.info("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤:")
            for target_name, matches in search_results.items():
                logger.info(f"\n  üè¢ –î–ª—è '{target_name}' –Ω–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (exact —Å–Ω–∞—á–∞–ª–∞)
                matches.sort(key=lambda x: ['exact', 'target_in_warehouse', 'city_match', 'warehouse_in_target'].index(x['match_type']))
                
                for i, match in enumerate(matches[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    logger.info(f"    {i+1}. ID: {match['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{match['name']}', –¢–∏–ø: {match['match_type']}")
                
                # –ë–µ—Ä–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
                if matches:
                    best_match = matches[0]
                    found_warehouses.append(best_match['id'])
                    logger.info(f"  ‚úÖ –í—ã–±—Ä–∞–Ω: ID {best_match['id']} - '{best_match['name']}'")
                else:
                    logger.warning(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è '{target_name}'")
             
            
            if not found_warehouses:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–∫–ª–∞–¥—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π: {warehouse_names}")
                logger.info("üí° –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏:")
            for warehouse in all_warehouses:
                wh_name = warehouse.get('name', '')
                wh_id = warehouse.get('id', 0)
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–ª–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                for target in warehouse_names:
                    if target.lower()[:3] in wh_name.lower():  # –ü–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã
                        logger.info(f"  üí° –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç: ID {wh_id} - '{wh_name}'")
                        break
            
            logger.info("üí° –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö")
             
            logger.info(f"‚úÖ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(found_warehouses)} - {found_warehouses}")
            return found_warehouses
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {e}")
            return []
    
    def _authenticate(self):
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets API
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç service account credentials
        """
        try:
            creds = Credentials.from_service_account_file(
                self.credentials_file, 
                scopes=self.scope
            )
            self.client = gspread.authorize(creds)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Sheets: {e}")
            raise
    
    def _open_workbook(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ URL"""
        try:
            if not self.client:
                self._authenticate()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL
            sheet_id = self._extract_sheet_id(self.sheet_url)
            logger.info(f"üìã –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å ID: {sheet_id}")
            self.workbook = self.client.open_by_key(sheet_id)
            logger.info(f"üìä –û—Ç–∫—Ä—ã—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞: {self.workbook.title}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            if "404" in str(e):
                logger.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ 404:")
                logger.error("  1. Service Account –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ")
                logger.error("  2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–ª–∏ ID —Ç–∞–±–ª–∏—Ü—ã")
                logger.error("  3. –¢–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞")
                logger.error("üîß –†–µ—à–µ–Ω–∏–µ: –¥–æ–±–∞–≤—å—Ç–µ email –∏–∑ credentials.json –≤ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ")
            raise
    
    def _extract_sheet_id(self, url: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Google Sheets URL
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL
        """

        logger.info(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL: {url}")

        patterns = [
            r'/spreadsheets/d/([a-zA-Z0-9-_]+)',
            r'key=([a-zA-Z0-9-_]+)',
            r'/d/([a-zA-Z0-9-_]+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                sheet_id = match.group(1)
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω ID —Ç–∞–±–ª–∏—Ü—ã: {sheet_id}")
                return sheet_id

        
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ URL: {url}")
    
    def _parse_date(self, date_str: str) -> date:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: DD.MM.YYYY, DD/MM/YYYY, YYYY-MM-DD, DD.MM (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
        """
        if not date_str or date_str.strip() == "":
            return date.today()
        
        date_str = date_str.strip()
        current_year = date.today().year
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = [
            "%d.%m.%Y",   # 15.07.2025
            "%d/%m/%Y",   # 15/07/2025
            "%Y-%m-%d",   # 2025-07-15
            "%d.%m.%y",   # 15.07.25
            "%d/%m/%y",   # 15/07/25
        ]
        
        for fmt in formats:
            try:
                return datetime.strptime(date_str, fmt).date()
            except ValueError:
                continue
        
        # –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –≥–æ–¥–∞ (DD.MM –∏–ª–∏ DD/MM)
        short_formats = [
            "%d.%m",      # 12.07
            "%d/%m",      # 12/07
        ]
        
        for fmt in short_formats:
            try:
                parsed_date = datetime.strptime(date_str, fmt).date()
                # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                return parsed_date.replace(year=current_year)
            except ValueError:
                continue
        
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_str}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è")
        return date.today()
    
    def _parse_warehouses(self, warehouses_str: str) -> List[int]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: "123,456,789" –∏–ª–∏ "123; 456; 789" –∏–ª–∏ "–≤—Å–µ"
        """
        if not warehouses_str or warehouses_str.strip() == "":
            return []
        
        warehouses_str = warehouses_str.strip().lower()
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–≤—Å–µ" –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (–∑–Ω–∞—á–∏—Ç –≤—Å–µ —Å–∫–ª–∞–¥—ã)
        if warehouses_str in ["–≤—Å–µ", "all", "–ª—é–±—ã–µ", "*"]:
            return []
        
        # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
        separators = [",", ";", "|"]
        for sep in separators:
            if sep in warehouses_str:
                parts = warehouses_str.split(sep)
                break
        else:
            # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω —Å–∫–ª–∞–¥
            parts = [warehouses_str]
        
        warehouse_ids = []
        for part in parts:
            try:
                warehouse_id = int(part.strip())
                warehouse_ids.append(warehouse_id)
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ID —Å–∫–ª–∞–¥–∞: {part}")
        
        return warehouse_ids
    
    async def get_monitoring_tasks(self, worksheet_name: str = None) -> List[MonitoringTask]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ä—Å–µ—Ä
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —è—á–µ–π–∫–∞–º–∏ (—Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞)
            logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —è—á–µ–µ–∫...")
            return await self.get_monitoring_tasks_from_cells(worksheet_name)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —è—á–µ–µ–∫: {e}")
            
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç...")
            return self._get_monitoring_tasks_table_format(worksheet_name)
    
    def _get_monitoring_tasks_table_format(self, worksheet_name: str = None) -> List[MonitoringTask]:
        """
        –ß–∏—Ç–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ä–æ–º —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        –ï—Å–ª–∏ worksheet_name –Ω–µ —É–∫–∞–∑–∞–Ω, —á–∏—Ç–∞–µ—Ç –≤—Å–µ –ª–∏—Å—Ç—ã
        """
        if not self.workbook:
            self._open_workbook()
        
        all_tasks = []
        
        try:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç, —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
            if worksheet_name:
                worksheets = [self.workbook.worksheet(worksheet_name)]
            else:
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
                worksheets = self.workbook.worksheets()
            
            logger.info(f"üìÑ –ë—É–¥–µ–º —á–∏—Ç–∞—Ç—å {len(worksheets)} –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            
            for worksheet in worksheets:
                logger.info(f"üìÑ –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç: {worksheet.title}")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                    all_values = worksheet.get_all_values()
                    
                    if len(all_values) < 2:
                        logger.warning(f"‚ö†Ô∏è –í –ª–∏—Å—Ç–µ {worksheet.title} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π)")
                        continue
                    
                    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    headers = [h.strip().lower() for h in all_values[0]]
                    
                    # –ò—â–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–≥–∏–±–∫–æ, –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
                    column_mapping = self._detect_columns(headers)
                    
                    tasks = []
                    for row_idx, row in enumerate(all_values[1:], start=2):
                        try:
                            task = self._parse_row(row, column_mapping, row_idx)
                            if task:
                                tasks.append(task)
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_idx} –ª–∏—Å—Ç–∞ {worksheet.title}: {e}")
                            continue
                    
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –∏–∑ –ª–∏—Å—Ç–∞ {worksheet.title}")
                    all_tasks.extend(tasks)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ {worksheet.title}: {e}")
                    continue
            
            logger.info(f"‚úÖ –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ {len(worksheets)} –ª–∏—Å—Ç–æ–≤")
            return all_tasks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            raise
    
    def _detect_columns(self, headers: List[str]) -> Dict[str, int]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ –∑–∞ —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç
        –ò—â–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        """
        column_mapping = {}
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: –∫–ª—é—á -> —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        keywords = {
            "barcode": ["–±–∞—Ä–∫–æ–¥", "—à—Ç—Ä–∏—Ö–∫–æ–¥", "barcode", "—à—Ç—Ä–∏—Ö-–∫–æ–¥", "–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞"],
            "quantity": ["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–∫–æ–ª-–≤–æ", "quantity", "—à—Ç", "—à—Ç—É–∫"],
            "warehouses": ["—Å–∫–ª–∞–¥—ã", "—Å–∫–ª–∞–¥", "warehouses", "warehouse", "wh"],
            "max_coefficient": ["–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "–∫–æ—ç—Ñ", "coefficient", "–º–∞–∫—Å –∫–æ—ç—Ñ", "max_coef"],
            "date_from": ["–¥–∞—Ç–∞ —Å", "—Å –¥–∞—Ç—ã", "from", "–Ω–∞—á–∞–ª–æ", "date_from"],
            "date_to": ["–¥–∞—Ç–∞ –¥–æ", "–¥–æ –¥–∞—Ç—ã", "to", "–∫–æ–Ω–µ—Ü", "date_to"],
            "active": ["–∞–∫—Ç–∏–≤–Ω–æ", "active", "–≤–∫–ª—é—á–µ–Ω–æ", "enabled"]
        }
        
        for col_idx, header in enumerate(headers):
            for field, possible_names in keywords.items():
                if any(keyword in header for keyword in possible_names):
                    column_mapping[field] = col_idx
                    break
        
        logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: {column_mapping}")
        return column_mapping
    
    def _parse_row(self, row: List[str], column_mapping: Dict[str, int], 
                   row_number: int) -> Optional[MonitoringTask]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–±—ä–µ–∫—Ç MonitoringTask
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if "barcode" not in column_mapping or "quantity" not in column_mapping:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –±–∞—Ä–∫–æ–¥ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                return None
            
            # –ß–∏—Ç–∞–µ–º –±–∞—Ä–∫–æ–¥
            barcode = row[column_mapping["barcode"]].strip()
            if not barcode:
                return None  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            
            # –ß–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            try:
                quantity = int(row[column_mapping["quantity"]].strip())
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_number}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                return None
            
            # –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            warehouses = []
            if "warehouses" in column_mapping:
                warehouses_str = row[column_mapping["warehouses"]]
                warehouses = self._parse_warehouses(warehouses_str)
            
            max_coefficient = 1.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ
            if "max_coefficient" in column_mapping:
                try:
                    coef_str = row[column_mapping["max_coefficient"]].strip()
                    if coef_str:
                        # –£–±–∏—Ä–∞–µ–º "x" –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä "x5" -> "5")
                        coef_str = coef_str.replace("x", "").replace("X", "")
                        max_coefficient = float(coef_str)
                except ValueError:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_number}: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç")
            
            # –î–∞—Ç—ã
            date_from = date.today()
            date_to = date.today()
            
            if "date_from" in column_mapping:
                date_from = self._parse_date(row[column_mapping["date_from"]])
            
            if "date_to" in column_mapping:
                date_to = self._parse_date(row[column_mapping["date_to"]])
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            is_active = True
            if "active" in column_mapping:
                active_str = row[column_mapping["active"]].strip().lower()
                is_active = active_str not in ["–Ω–µ—Ç", "no", "false", "0", "–≤—ã–∫–ª", "disabled"]
            
            return MonitoringTask(
                barcode=barcode,
                quantity=quantity,
                allowed_warehouses=warehouses,
                max_coefficient=max_coefficient,
                date_from=date_from,
                date_to=date_to,
                is_active=is_active
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {row_number}: {e}")
            return None


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def test_sheets_parser():
    """
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
    """
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    parser = GoogleSheetsParser("credentials.json", "url_—Ç–∞–±–ª–∏—Ü—ã")
    
    # –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–º —Ä–µ–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º:
    # tasks = parser.get_monitoring_tasks()
    # for task in tasks:
    #     print(f"üì¶ {task.barcode}: {task.quantity} —à—Ç, –º–∞–∫—Å –∫–æ—ç—Ñ {task.max_coefficient}")


if __name__ == "__main__":
    import asyncio
    asyncio.run(test_sheets_parser())
