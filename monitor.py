"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤ –ø—Ä–∏–µ–º–∫–∏ WB
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤
"""
import asyncio
import logging
import time
from typing import List, Dict, Any, Optional, Set
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
import json

from wb_api import WildberriesAPI, ProductInfo, SlotInfo, AcceptanceCoefficient
from sheets_parser import GoogleSheetsParser, MonitoringTask
from config import config
import telegram_bot

logger = logging.getLogger(__name__)


@dataclass
class FoundSlot:
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å–ª–æ—Ç–µ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –ø—Ä–∏–µ–º–∫–∏
    """
    barcode: str
    warehouse_id: int
    warehouse_name: str
    coefficient: float
    box_type_name: str
    date: datetime
    allow_unload: bool
    found_at: datetime
    monitoring_task: MonitoringTask
    
    def is_really_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        return (self.coefficient == 0 or self.coefficient == 1) and self.allow_unload
    
    def matches_criteria(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        if self.coefficient > self.monitoring_task.max_coefficient:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
        if (self.monitoring_task.allowed_warehouses and 
            self.warehouse_id not in self.monitoring_task.allowed_warehouses):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
        slot_date = self.date.date()
        if not (self.monitoring_task.date_from <= slot_date <= self.monitoring_task.date_to):
            return False
        
        return True
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            "barcode": self.barcode,
            "warehouse_id": self.warehouse_id,
            "warehouse_name": self.warehouse_name,
            "coefficient": self.coefficient,
            "box_type_name": self.box_type_name,
            "date": self.date.isoformat(),
            "allow_unload": self.allow_unload,
            "found_at": self.found_at.isoformat(),
            "is_available": self.is_really_available(),
            "matches_criteria": self.matches_criteria(),
            "task": {
                "barcode": self.monitoring_task.barcode,
                "quantity": self.monitoring_task.quantity,
                "allowed_warehouses": self.monitoring_task.allowed_warehouses,
                "max_coefficient": self.monitoring_task.max_coefficient,
                "date_from": self.monitoring_task.date_from.isoformat(),
                "date_to": self.monitoring_task.date_to.isoformat(),
                "is_active": self.monitoring_task.is_active
            }
        }


class SlotMonitor:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤ –ø—Ä–∏–µ–º–∫–∏
    """
    
    def __init__(self):
        self.wb_api = WildberriesAPI(config.wb_api_key)
        self.sheets_parser = GoogleSheetsParser(
            config.google_sheets_credentials_file,
            config.google_sheets_url
        )
        
        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notified_slots: Set[str] = set()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        self.stats = {
            "checks_performed": 0,
            "slots_found": 0,
            "errors_count": 0,
            "last_check": None
        }
        
        # Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.telegram_bot = None
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ 6/–º–∏–Ω—É—Ç—É
        self.monitoring_cycles = []  # –í—Ä–µ–º–µ–Ω–∞ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–æ–≤
        self.current_minute_start = None  # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç—ã
        self.cycles_in_current_minute = 0  # –°—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç–µ
    
    async def start_monitoring(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        –†–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è—è —Å–ª–æ—Ç—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤ WB")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
        self.telegram_bot = await telegram_bot.initialize_bot()
        if self.telegram_bot:
            logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        else:
            logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        if not await self.wb_api.test_connection():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WB API")
            return
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        last_cycle_duration = 0
        
        while True:
            try:
                cycle_start = time.time()
                await self._perform_monitoring_cycle()
                cycle_duration = time.time() - cycle_start
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—É–∑—É –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
                pause_duration = self._calculate_dynamic_pause(cycle_duration)
                
                logger.info(f"üò¥ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.1f}—Å, –ø–∞—É–∑–∞ {pause_duration:.1f}—Å")
                if pause_duration > 0:
                    await asyncio.sleep(pause_duration)
                
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                self.stats["errors_count"] += 1
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                await asyncio.sleep(30)
    
    def _calculate_dynamic_pause(self, cycle_duration: float) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ø–∞—É–∑—É –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 6 —Ü–∏–∫–ª–æ–≤ –Ω–∞ –º–∏–Ω—É—Ç—É
        """
        if not config.enable_adaptive_monitoring:
            return config.check_interval_seconds
        
        now = time.time()
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª –∏–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –º–∏–Ω—É—Ç—É
        if (self.current_minute_start is None or 
            now - self.current_minute_start >= 60):
            self.current_minute_start = now
            self.cycles_in_current_minute = 1
            logger.info(f"üïê –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –º–∏–Ω—É—Ç—É, —Ü–∏–∫–ª 1/6")
        else:
            self.cycles_in_current_minute += 1
            logger.info(f"üïê –¶–∏–∫–ª {self.cycles_in_current_minute}/6 –≤ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç–µ")
        
        # –ï—Å–ª–∏ —Ü–∏–∫–ª –º–µ–¥–ª–µ–Ω–Ω—ã–π (>10 —Å–µ–∫—É–Ω–¥) - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ä–∞–∑—É
        if cycle_duration >= 10:
            logger.info(f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ({cycle_duration:.1f}—Å) - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ä–∞–∑—É")
            return 0.1
        
        # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 6 —Ü–∏–∫–ª–æ–≤ - –∂–¥–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
        if self.cycles_in_current_minute >= 6:
            time_to_next_minute = 60 - (now - self.current_minute_start)
            if time_to_next_minute > 0:
                logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª–∏ 6 —Ü–∏–∫–ª–æ–≤, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã: {time_to_next_minute:.1f}—Å")
                return time_to_next_minute
            return 0.1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ü–∏–∫–ª–æ–≤
        elapsed_time = now - self.current_minute_start
        remaining_time = 60 - elapsed_time
        remaining_cycles = 6 - self.cycles_in_current_minute
        
        if remaining_cycles <= 0:
            return 0.1
        
        # –ü–∞—É–∑–∞ = –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ü–∏–∫–ª–æ–≤
        optimal_pause = remaining_time / remaining_cycles
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 0.1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        pause = max(0.1, optimal_pause)
        
        logger.info(f"üìä –û—Å—Ç–∞–ª–æ—Å—å {remaining_cycles} —Ü–∏–∫–ª–æ–≤ –∑–∞ {remaining_time:.1f}—Å ‚Üí –ø–∞—É–∑–∞ {pause:.1f}—Å")
        return pause
    
    async def _perform_monitoring_cycle(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
        1. –ß–∏—Ç–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ Google Sheets
        2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
        """
        self.stats["checks_performed"] += 1
        self.stats["last_check"] = datetime.now()
        
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –ß–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        try:
            monitoring_tasks = await self.sheets_parser.get_monitoring_tasks()
            active_tasks = [task for task in monitoring_tasks if task.is_active and task.is_date_valid()]
            
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(monitoring_tasks)} –∑–∞–¥–∞—á, –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_tasks)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return
        
        if not active_tasks:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
        grouped_tasks = self._group_tasks_for_api(active_tasks)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
        for group in grouped_tasks:
            try:
                await self._check_task_group(group)
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á: {e}")
                continue
    
    def _group_tasks_for_api(self, tasks: List[MonitoringTask]) -> List[List[MonitoringTask]]:
        """
        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
        WB –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ 5000 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        """
        # –ü–æ–∫–∞ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ 50 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å
        # –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø–∞—Å –ø–æ –ª–∏–º–∏—Ç–∞–º
        groups = []
        group_size = 50
        
        for i in range(0, len(tasks), group_size):
            groups.append(tasks[i:i + group_size])
        
        logger.info(f"üì¶ –†–∞–∑–±–∏–ª–∏ {len(tasks)} –∑–∞–¥–∞—á –Ω–∞ {len(groups)} –≥—Ä—É–ø–ø")
        return groups
    
    async def _check_task_group(self, tasks: List[MonitoringTask]):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä—É–ø–ø—É –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏–µ–º–∫–∏
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
        products = []
        for task in tasks:
            products.append(ProductInfo(
                barcode=task.barcode,
                quantity=task.quantity
            ))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        try:
            slots = await self.wb_api.check_acceptance_options(products)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ –æ–ø—Ü–∏–π –ø—Ä–∏–µ–º–∫–∏: {e}")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID —Å–∫–ª–∞–¥–æ–≤ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        all_warehouse_ids = set()
        for slot in slots:
            if not slot.is_error and slot.warehouses:
                for warehouse in slot.warehouses:
                    all_warehouse_ids.add(warehouse.warehouse_id)
        
        if not all_warehouse_ids:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
        try:
            logger.info(f"üìä –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è {len(all_warehouse_ids)} —Å–∫–ª–∞–¥–æ–≤")
            coefficients = await self.wb_api.get_acceptance_coefficients(list(all_warehouse_ids))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–∫–ª–∞–¥—É –∏ –¥–∞—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        coef_index = {}
        for coef in coefficients:
            key = (coef.warehouse_id, coef.date.date(), coef.box_type_id)
            coef_index[key] = coef
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
        for slot in slots:
            if slot.is_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {slot.barcode}: {slot.error}")
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –ø–æ –±–∞—Ä–∫–æ–¥—É
            task = next((t for t in tasks if t.barcode == slot.barcode), None)
            if not task:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {slot.barcode}")
                continue
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            suitable_slots = self._find_suitable_slots_with_coefficients(
                slot, task, coef_index
            )
            
            if suitable_slots:
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(suitable_slots)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è {slot.barcode}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await self._notify_about_found_slots(suitable_slots)
    
    def _find_suitable_slots_with_coefficients(self, slot: SlotInfo, task: MonitoringTask, 
                                              coef_index: Dict) -> List[FoundSlot]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏–µ–º–∫–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∑–∞–¥–∞—á–∏
        """
        suitable_slots = []
        
        for warehouse in slot.warehouses:
            warehouse_id = warehouse.warehouse_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Å–∫–ª–∞–¥ –≤ –∑–∞–¥–∞—á–µ
            if task.allowed_warehouses and warehouse_id not in task.allowed_warehouses:
                continue
            
            # –ò—â–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
            current_date = datetime.now().date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∑–∞–¥–∞—á–∏
            check_date = max(task.date_from, current_date)
            end_date = task.date_to
            
            while check_date <= end_date:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É–ø–∞–∫–æ–≤–∫–∏
                for box_type_id in [1, 2, 6]:  # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã: –æ–±—ã—á–Ω–∞—è, –º–æ–Ω–æ–ø–∞–ª–ª–µ—Ç, —Å—É–ø–µ—Ä—Å–µ–π—Ñ
                    coef_key = (warehouse_id, check_date, box_type_id)
                    
                    if coef_key in coef_index:
                        coef = coef_index[coef_key]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                        if (coef.is_slot_available() and  # –°–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ—ç—Ñ 0-1 + allowUnload)
                            coef.coefficient <= task.max_coefficient and  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
                            check_date >= task.date_from and check_date <= task.date_to):  # –î–∞—Ç–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç
                            
                            found_slot = FoundSlot(
                                barcode=slot.barcode,
                                warehouse_id=warehouse_id,
                                warehouse_name=coef.warehouse_name,
                                coefficient=coef.coefficient,
                                box_type_name=coef.box_type_name,
                                date=coef.date,
                                allow_unload=coef.allow_unload,
                                found_at=datetime.now(),
                                monitoring_task=task
                            )
                            
                            suitable_slots.append(found_slot)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
                check_date = check_date + timedelta(days=1)
        
        return suitable_slots
    
    async def _notify_about_found_slots(self, found_slots: List[FoundSlot]):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–∞—Ö
        """
        for slot in found_slots:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            slot_key = f"{slot.barcode}_{slot.warehouse_id}_{slot.date.date()}_{slot.box_type_name}"
            
            if slot_key in self.notified_slots:
                continue  # –£–∂–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ –æ–± —ç—Ç–æ–º —Å–ª–æ—Ç–µ
            
            self.notified_slots.add(slot_key)
            self.stats["slots_found"] += 1
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""
üéØ –ù–ê–ô–î–ï–ù –í–´–ì–û–î–ù–´–ô –°–õ–û–¢!

üì¶ –¢–æ–≤–∞—Ä: {slot.barcode}
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {slot.monitoring_task.quantity} —à—Ç
üè¢ –°–∫–ª–∞–¥: {slot.warehouse_name} (ID: {slot.warehouse_id})
üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{slot.coefficient} (–ª–∏–º–∏—Ç: x{slot.monitoring_task.max_coefficient})
üì¶ –¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏: {slot.box_type_name}
üìÖ –î–∞—Ç–∞: {slot.date.strftime('%d.%m.%Y')}
üöö –†–∞–∑–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞: {'‚úÖ –î–∞' if slot.allow_unload else '‚ùå –ù–µ—Ç'}
‚è∞ –ù–∞–π–¥–µ–Ω–æ: {slot.found_at.strftime('%H:%M:%S')}

            """
            
            logger.info(f"üîî {message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            await self._send_telegram_notification(slot)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            await self._save_found_slot(slot)
    
    async def _send_telegram_notification(self, slot: FoundSlot):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ –≤ Telegram
        """
        try:
            if self.telegram_bot:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram –±–æ—Ç–∞
                slot_data = slot.to_dict()
                await telegram_bot.send_slot_notification(slot_data)
                logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–ª–æ—Ç–∞ {slot.barcode}")
            else:
                logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def get_statistics(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        return {
            **self.stats,
            "last_check_str": self.stats["last_check"].strftime('%Y-%m-%d %H:%M:%S') 
                             if self.stats["last_check"] else "–ù–∏–∫–æ–≥–¥–∞",
            "notified_slots_count": len(self.notified_slots)
        }
    
    async def manual_check(self, barcode: str, quantity: int) -> List[SlotInfo]:
        """
        –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        """
        logger.info(f"üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ {barcode}")
        
        products = [ProductInfo(barcode=barcode, quantity=quantity)]
        slots = await self.wb_api.check_acceptance_options(products)
        
        for slot in slots:
            if slot.is_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {slot.error}")
            else:
                logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(slot.warehouses)}")
                for wh in slot.warehouses:
                    logger.info(f"  üè¢ –°–∫–ª–∞–¥ {wh.warehouse_id}: box={wh.can_box}, mono={wh.can_monopollet}")
        
    async def _save_found_slot(self, slot: FoundSlot):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            import os
            os.makedirs("found_slots", exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
            filename = f"found_slots/slots_{datetime.now().strftime('%Y-%m-%d')}.json"
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
            import json
            slots_data = []
            
            try:
                with open(filename, "r", encoding="utf-8") as f:
                    slots_data = json.load(f)
            except FileNotFoundError:
                pass  # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
            slots_data.append(slot.to_dict())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(slots_data, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üíæ –°–ª–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ—Ç–∞: {e}")
    
    async def get_found_slots_statistics(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        """
        try:
            import os
            import json
            from datetime import date, timedelta
            
            stats = {
                "today": 0,
                "yesterday": 0,
                "this_week": 0,
                "total": 0,
                "best_coefficients": [],
                "top_warehouses": {}
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            today = date.today()
            
            for days_back in range(7):
                check_date = today - timedelta(days=days_back)
                filename = f"found_slots/slots_{check_date.strftime('%Y-%m-%d')}.json"
                
                if os.path.exists(filename):
                    try:
                        with open(filename, "r", encoding="utf-8") as f:
                            day_slots = json.load(f)
                        
                        count = len(day_slots)
                        stats["total"] += count
                        stats["this_week"] += count
                        
                        if days_back == 0:
                            stats["today"] = count
                        elif days_back == 1:
                            stats["yesterday"] = count
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ —Å–∫–ª–∞–¥—ã
                        for slot_data in day_slots:
                            coef = slot_data.get("coefficient", -1)
                            warehouse_name = slot_data.get("warehouse_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                            
                            if coef >= 0:
                                stats["best_coefficients"].append(coef)
                            
                            if warehouse_name in stats["top_warehouses"]:
                                stats["top_warehouses"][warehouse_name] += 1
                            else:
                                stats["top_warehouses"][warehouse_name] = 1
                                
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            if stats["best_coefficients"]:
                stats["best_coefficients"].sort()
                stats["avg_coefficient"] = sum(stats["best_coefficients"]) / len(stats["best_coefficients"])
                stats["min_coefficient"] = min(stats["best_coefficients"])
                stats["max_coefficient"] = max(stats["best_coefficients"])
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}


# –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def quick_test():
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    logger.info("üß™ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not config.validate():
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = SlotMonitor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    if await monitor.wb_api.test_connection():
        logger.info("‚úÖ WB API —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å WB API")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Sheets (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    try:
        tasks = monitor.sheets_parser.get_monitoring_tasks()
        logger.info(f"‚úÖ Google Sheets: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    logger.info("üß™ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=getattr(logging, config.log_level),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(config.log_file),
            logging.StreamHandler()
        ]
    )
    
    logger.info("=" * 50)
    logger.info("üöÄ WB SLOTS MONITOR STARTED")
    logger.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not config.validate():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = SlotMonitor()
    
    try:
        await monitor.start_monitoring()
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞")


if __name__ == "__main__":
    asyncio.run(main())
