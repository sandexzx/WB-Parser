"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Wildberries
–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤ –ø—Ä–∏–µ–º–∫–∏
"""
import asyncio
import aiohttp
import json
import time
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


@dataclass
class ProductInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ—Ç–æ–≤"""
    barcode: str
    quantity: int


@dataclass
class WarehouseOption:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º —Å–∫–ª–∞–¥–µ"""
    warehouse_id: int
    can_box: bool
    can_monopollet: bool
    can_supersafe: bool


@dataclass
class SlotInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–µ –ø—Ä–∏–µ–º–∫–∏"""
    barcode: str
    warehouses: List[WarehouseOption]
    error: Optional[Dict[str, str]] = None
    is_error: bool = False


@dataclass
class AcceptanceCoefficient:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –∏ –¥–∞—Ç—ã"""
    date: datetime
    coefficient: float
    warehouse_id: int
    warehouse_name: str
    allow_unload: bool
    box_type_name: str
    box_type_id: int
    storage_coef: Optional[float] = None
    delivery_coef: Optional[float] = None
    delivery_base_liter: Optional[float] = None
    delivery_additional_liter: Optional[float] = None
    storage_base_liter: Optional[float] = None
    storage_additional_liter: Optional[float] = None
    is_sorting_center: bool = False
    
    def is_slot_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ª–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: coefficient –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –∏–ª–∏ 1 –ò allowUnload –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true
        """
        return (self.coefficient == 0 or self.coefficient == 1) and self.allow_unload


class SimpleRateLimiter:
    """
    –ü—Ä–æ—Å—Ç–æ–π rate limiter –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –ª–∏–º–∏—Ç–æ–≤ API
    """
    def __init__(self):
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.min_intervals = {
            'general': 1.0,      # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
            'coefficients': 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        }
        self.last_request_time = {endpoint: 0 for endpoint in self.min_intervals.keys()}
    
    async def wait_if_needed(self, endpoint_type: str = 'general'):
        """–ñ–¥–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        if endpoint_type not in self.min_intervals:
            endpoint_type = 'general'
        
        now = time.time()
        min_interval = self.min_intervals[endpoint_type]
        time_since_last = now - self.last_request_time[endpoint_type]
        
        if time_since_last < min_interval:
            sleep_time = min_interval - time_since_last
            logger.debug(f"‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {sleep_time:.1f}—Å")
            await asyncio.sleep(sleep_time)
        
        self.last_request_time[endpoint_type] = time.time()


class WildberriesAPI:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WB API
    """
    
    def __init__(self, api_key: str, base_url: str = "https://supplies-api.wildberries.ru"):
        self.api_key = api_key
        self.base_url = base_url
        self.rate_limiter = SimpleRateLimiter()
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
            "User-Agent": "WB-Monitor/1.0"
        }
    
    async def _make_request(self, method: str, endpoint: str, 
                          data: Optional[Dict] = None, 
                          params: Optional[Dict] = None,
                          endpoint_type: str = 'general') -> Dict[str, Any]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ WB API
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–ª—é–¥–∞–µ—Ç rate limiting —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ endpoint
        """
        await self.rate_limiter.wait_if_needed(endpoint_type)
        
        url = f"{self.base_url}{endpoint}"
        start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.request(
                    method=method,
                    url=url,
                    headers=self.headers,
                    json=data,
                    params=params
                ) as response:
                    
                    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                    request_duration = time.time() - start_time
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.info(f"üîÑ {method} {endpoint} -> {response.status} ({request_duration:.1f}—Å)")
                    
                    response_text = await response.text()
                    
                    if response.status == 429:
                        logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–∏–ª–∏ 429 (Too Many Requests)")
                        raise Exception("Rate limit exceeded")
                    
                    if response.status == 401:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
                        raise Exception("Authorization failed")
                    
                    if response.status not in [200, 201]:
                        logger.error(f"‚ùå HTTP {response.status}: {response_text}")
                        raise Exception(f"HTTP {response.status}: {response_text}")
                    
                    return json.loads(response_text)
                    
            except aiohttp.ClientError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                raise Exception(f"Connection error: {e}")
    
    async def get_warehouses(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ WB
        GET /api/v1/warehouses
        """
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤...")
        
        result = await self._make_request("GET", "/api/v1/warehouses")
        
        # API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª–∏–±–æ –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –ª–∏–±–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º result
        if isinstance(result, list):
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–∞—à–∏–º –∫–æ–¥–æ–º
            normalized_warehouses = []
            for warehouse in result:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∫–ª–∞–¥–∞
                normalized = {
                    'id': warehouse.get('ID', 0),  # –í–∞–∂–Ω–æ: –ø–æ–ª–µ ID —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã!
                    'name': warehouse.get('name', ''),
                    'address': warehouse.get('address', ''),
                    'workTime': warehouse.get('workTime', ''),
                    'acceptsQR': warehouse.get('acceptsQR', False),
                    'isActive': warehouse.get('isActive', False),
                    'isTransitActive': warehouse.get('isTransitActive', False)
                }
                normalized_warehouses.append(normalized)
            return normalized_warehouses
        else:
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å result
            warehouses_data = result.get("result", [])
            normalized_warehouses = []
            for warehouse in warehouses_data:
                normalized = {
                    'id': warehouse.get('ID', 0),  # –ò –∑–¥–µ—Å—å —Ç–æ–∂–µ!
                    'name': warehouse.get('name', ''),
                    'address': warehouse.get('address', ''),
                    'workTime': warehouse.get('workTime', ''),
                    'acceptsQR': warehouse.get('acceptsQR', False),
                    'isActive': warehouse.get('isActive', False),
                    'isTransitActive': warehouse.get('isTransitActive', False)
                }
                normalized_warehouses.append(normalized)
            return normalized_warehouses
    
    async def check_acceptance_options(self, products: List[ProductInfo], 
                                     warehouse_id: Optional[int] = None) -> List[SlotInfo]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        POST /api/v1/acceptance/options
        """
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        request_data = []
        for product in products:
            request_data.append({
                "quantity": product.quantity,
                "barcode": product.barcode
            })
        
        params = {}
        if warehouse_id:
            params["warehouseID"] = str(warehouse_id)
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        response = await self._make_request("POST", "/api/v1/acceptance/options", 
                                          data=request_data, params=params)
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç - API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª–∏–±–æ –º–∞—Å—Å–∏–≤, –ª–∏–±–æ –æ–±—ä–µ–∫—Ç —Å result
        response_data = response
        if isinstance(response, dict) and "result" in response:
            response_data = response["result"]
        elif not isinstance(response, list):
            logger.warning("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
            response_data = []
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        slots = []
        for item in response_data:
            warehouses = []
            
            if item.get("warehouses"):
                for wh in item["warehouses"]:
                    warehouses.append(WarehouseOption(
                        warehouse_id=wh["warehouseID"],
                        can_box=wh.get("canBox", False),
                        can_monopollet=wh.get("canMonopallet", False),
                        can_supersafe=wh.get("canSupersafe", False)
                    ))
            
            slots.append(SlotInfo(
                barcode=item["barcode"],
                warehouses=warehouses,
                error=item.get("error"),
                is_error=item.get("isError", False)
            ))
        
        return slots
        
    async def get_acceptance_coefficients(self, warehouse_ids: Optional[List[int]] = None) -> List[AcceptanceCoefficient]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π
        GET /api/v1/acceptance/coefficients
        
        Args:
            warehouse_ids: –°–ø–∏—Å–æ–∫ ID —Å–∫–ª–∞–¥–æ–≤. –ï—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏–µ–º–∫–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤
        """
        params = {}
        if warehouse_ids:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ID –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ "507,117501"
            params["warehouseIDs"] = ",".join(map(str, warehouse_ids))
        
        logger.info(f"üìä –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è {len(warehouse_ids) if warehouse_ids else '–≤—Å–µ—Ö'} —Å–∫–ª–∞–¥–æ–≤")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint_type –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ 6 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É
        response = await self._make_request("GET", "/api/v1/acceptance/coefficients", 
                                          params=params, endpoint_type='coefficients')
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç - —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤
        coefficients_data = response
        if isinstance(response, dict) and "result" in response:
            coefficients_data = response["result"]
        elif not isinstance(response, list):
            logger.warning("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç coefficients API")
            return []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã AcceptanceCoefficient
        coefficients = []
        for item in coefficients_data:
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞
                date_str = item.get("date", "")
                date_obj = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
                
                coefficient = AcceptanceCoefficient(
                    date=date_obj,
                    coefficient=item.get("coefficient", -1),
                    warehouse_id=item.get("warehouseID", 0),
                    warehouse_name=item.get("warehouseName", ""),
                    allow_unload=item.get("allowUnload", False),
                    box_type_name=item.get("boxTypeName", ""),
                    box_type_id=item.get("boxTypeID", 0),
                    storage_coef=item.get("storageCoef"),
                    delivery_coef=item.get("deliveryCoef"),
                    delivery_base_liter=item.get("deliveryBaseLiter"),
                    delivery_additional_liter=item.get("deliveryAdditionalLiter"),
                    storage_base_liter=item.get("storageBaseLiter"),
                    storage_additional_liter=item.get("storageAdditionalLiter"),
                    is_sorting_center=item.get("isSortingCenter", False)
                )
                
                coefficients.append(coefficient)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞: {e}")
                continue
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(coefficients)} –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏–µ–º–∫–∏")
        return coefficients
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API WB
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞
        """
        try:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WB API...")
            warehouses = await self.get_warehouses()
            logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def get_rate_limiter_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã rate limiter
        """
        return {
            'general_last_request': self.rate_limiter.last_request_time.get('general', 0),
            'coefficients_last_request': self.rate_limiter.last_request_time.get('coefficients', 0)
        }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–º API –∫–ª—é—á)
async def test_wb_api():
    """
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å API
    """
    api = WildberriesAPI("–≤–∞—à_api_–∫–ª—é—á_–∑–¥–µ—Å—å")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if not await api.test_connection():
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ—Ç–æ–≤
    test_products = [
        ProductInfo(barcode="test_barcode_1", quantity=1),
        ProductInfo(barcode="test_barcode_2", quantity=5)
    ]
    
    slots = await api.check_acceptance_options(test_products)
    
    for slot in slots:
        if slot.is_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {slot.barcode}: {slot.error}")
        else:
            print(f"‚úÖ {slot.barcode}: –¥–æ—Å—Ç—É–ø–Ω–æ —Å–∫–ª–∞–¥–æ–≤ - {len(slot.warehouses)}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–º API –∫–ª—é—á)
    # asyncio.run(test_wb_api())
    pass